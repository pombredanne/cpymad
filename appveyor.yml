environment:

  global:
    # Cache dependencies
    # pypi.coldfix.de/simple serves prebuilt .whl archives that were
    # downloaded from: http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyyaml
    PIP_FIND_LINKS: "file://C:\\pip-cache http://pypi.coldfix.de/simple"
    PIP_WHEEL_DIR:  C:\pip-cache

    MADX_DIR:       C:\madx
    MINGW_HOME:     C:\mingw-static

    COVERALLS_REPO_TOKEN:
      secure: PomPESKrst4rtCnkZOCyfyBEb03xcHzg6O0bGrYw7lf3oGWcA/ufdhu+7+shaJRF

  matrix:
    - PYTHON_HOME: "C:\\Python27"
      PYTHON_VERSION: "2.7"
      ARCH: "32"

    - PYTHON_HOME: "C:\\Python33"
      PYTHON_VERSION: "3.3"
      ARCH: "32"

    - PYTHON_HOME: "C:\\Python34"
      PYTHON_VERSION: "3.4"
      ARCH: "32"

    - PYTHON_HOME: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7"
      ARCH: "64"

    - PYTHON_HOME: "C:\\Python33-x64"
      PYTHON_VERSION: "3.3"
      ARCH: "64"

    - PYTHON_HOME: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4"
      ARCH: "64"

install:
  # Log initial environment variables and cache contents
  - "set"
  - ps: "if (Test-Path $env:PIP_WHEEL_DIR) { ls $env:PIP_WHEEL_DIR }"
  - ps: "if (Test-Path $env:MINGW_HOME)    { ls $env:MINGW_HOME }"

  # Add python and installed scripts to PATH
  - "set PATH=%PYTHON_HOME%;%PYTHON_HOME%\\Scripts;%PATH%"

  # install 'wheel' package which is needed for the following step
  - "pip install wheel"

  # rebuild dependency cache (if not existing) and then install
  # dependencies from cache:
  # The numpy .whl seems to be recognized as a pre-release, which is why --pre
  # is needed to make pip use the file anyways:
  - "pip wheel --no-index --pre cython numpy pyyaml"
  - "pip wheel setuptools coverage coveralls"
  - "pip install --no-index --pre cython numpy pyyaml setuptools coverage coveralls"

  # Install the build environment with a script that uses the environment
  # variables: we use a Python 3.4 to run the script as it needs to uncompress
  # .tar.xv archives which is not supported in Python 2.
  - "C:\\Python34-x64\\python appveyor\\pywinbuilder.py"
  - "set PATH=%MINGW_HOME%\\bin;%PATH%"

  # build MAD-X
  - "call appveyor\\get_madx.bat %MADX_DIR%"

  # build and install cpymad
  - "python setup.py build_ext -c mingw32 -lquadmath --madxdir=%MADX_DIR%"
  - "python setup.py bdist_wheel"
  # wildcard expansion is a pain in CMD.exe and just a little less in
  # powershell:
  - ps: "pip install (ls dist\\* | % {\"$_\"})"

  # prevent python from accidentally importing the cpymad package from the
  # local check-out - we want the installed package, as only it contains the
  # libmadx.pyd binary:
  - "rd /s /q cpymad"

  # Log final environment variables and cache contents
  - "set"
  - ps: "ls $env:PIP_WHEEL_DIR"
  - ps: "ls $env:MINGW_HOME"

build: off

test_script:
  - coverage run --source=cpymad    test/test_resource.py -v
  - coverage run --source=cpymad -a test/test_rpc.py      -v
  - coverage run --source=cpymad -a test/test_util.py     -v
  - coverage run --source=cpymad -a test/test_madx.py     -v
  - coverage run --source=cpymad -a test/test_locator.py  -v
  - coverage run --source=cpymad -a test/test_model.py    -v

after_test:
 - coveralls

artifacts:
  - path: dist\*

cache:
  - C:\pip-cache
  - C:\mingw-static
